apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: frontend-app-template
  title: Frontend App Template
  description: Monorepo con una aplicación de angular
spec:
  owner: user:guest
  type: service

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Configuración del espacio de trabajo
      required:
        - preset
      properties:
        workspaceName:
          title: Nombre del repositorio
          type: string
          description: 
          ui:autofocus: true
          ui:options:
            rows: 5
        targetName:
          title: Nombre de la aplicación / librería
          type: string
          description: 
          ui:autofocus: true
          ui:options:
            rows: 5
        ssr:
          title: Ssr
          type: boolean
          description: Incluir soporte para SSR (Server Side Rendering)
          ui:widget: select
        storybook:
          title: Storybook
          type: boolean
          description: Incluir soporte para storybook
          ui:widget: select
        devops:
          title: Repositorio
          type: string
          description: Selecciona el proveedor de devops
          default: Github
          enum:
            - Github
            - Bitbucket
  steps:
    # Each step executes an action, in this case one templates files into the working directory.
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./content
        values:
          name: ${{ parameters.name }}

          # This step publishes the contents of the working directory to GitHub.
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}

        # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

        # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
